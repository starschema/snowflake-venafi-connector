package main

import (
	"errors"
	"flag"
	"fmt"
	"log"
	"os"
)

func NewGetCredsCommand() *GetCredsCommand {
	cc := &GetCredsCommand{
		fs: flag.NewFlagSet("getcreds", flag.ContinueOnError),
	}
	cc.fs.StringVar(&cc.refresh_token, "refresh_token", "", "Refresh Token for Venafi TPP. WARNING: Refresh Token generated by Vcert Library cannot be used")
	cc.fs.StringVar(&cc.tpp_url, "tpp_url", "", "URL of Venafi Trust Protection Platform")
	cc.fs.StringVar(&cc.username, "username", "", "name of the person to be greeted")
	cc.fs.StringVar(&cc.password, "password", "", "name of the person to be greeted")

	return cc
}

type GetCredsCommand struct {
	fs            *flag.FlagSet
	refresh_token string
	tpp_url       string
	username      string
	password      string
}

func (c *GetCredsCommand) Name() string {
	return c.fs.Name()
}

func (c *GetCredsCommand) Init(args []string) error {
	return c.fs.Parse(args)
}

func (c *GetCredsCommand) Run() error {
	accessToken, refreshToken, expires, err := GetVenafiCredentials(c.tpp_url, c.refresh_token, c.username, c.password)
	if err != nil {
		log.Fatal("Failed to get new creds from Venafi TPP server")
	}
	Log(true, fmt.Sprintf(`Retrieved new venafi credentials. Add it to your config file:
	Refresh Token: %s
	Access Token: %s
	Expiration TIme: %d`, refreshToken, accessToken, expires), 0)
	return nil
}

func NewStatusCommand() *StatusCommand {
	cc := &StatusCommand{
		fs: flag.NewFlagSet("status", flag.ContinueOnError),
	}
	return cc
}

type StatusCommand struct {
	fs *flag.FlagSet
}

func (c *StatusCommand) Name() string {
	return c.fs.Name()
}

func (c *StatusCommand) Init(args []string) error {
	return c.fs.Parse(args)
}

func (c *StatusCommand) Run() error {
	config, _, s3Client, lambdaClient, iamClient, gatewayClient, stsClient := bootstrapOperation(0)
	accountID, err := GetCallerIdentity(stsClient)
	if err != nil {
		log.Fatal("Failed to get account id")
	}
	PrintStatus(GetStatus(0, config, s3Client, lambdaClient, iamClient, gatewayClient, accountID))
	return nil
}

func NewInstallCommand() *InstallCommand {
	cc := &InstallCommand{
		fs: flag.NewFlagSet("install", flag.ContinueOnError),
	}
	return cc
}

type InstallCommand struct {
	fs *flag.FlagSet
}

func (c *InstallCommand) Name() string {
	return c.fs.Name()
}

func (c *InstallCommand) Init(args []string) error {
	return c.fs.Parse(args)
}

func (c *InstallCommand) Run() error {
	config, _, s3Client, lambdaClient, iamClient, gatewayClient, stsClient := bootstrapOperation(0)
	accountID, err := GetCallerIdentity(stsClient)
	if err != nil {
		log.Fatal("Failed to get account id")
	}
	Install(config, s3Client, lambdaClient, iamClient, gatewayClient, accountID)
	return nil
}

type Runner interface {
	Init([]string) error
	Run() error
	Name() string
}

func root(args []string) error {
	if len(args) < 1 {
		return errors.New("You must pass a sub-command: 'install' 'status', 'getcreds'")
	}

	cmds := []Runner{
		NewInstallCommand(),
		NewStatusCommand(),
		NewGetCredsCommand(),
	}

	subcommand := os.Args[1]

	for _, cmd := range cmds {
		if cmd.Name() == subcommand {
			fmt.Printf("%v", cmd.Init(os.Args[2:]))
			cmd.Run()
			if subcommand == "install" {
				Log(true, `Venafi Snowflake Integration is succesfully installed. You can call the following functions from Snowflake:
			GETMACHINEID(<type:string>, <ttp_url:string>, <request_id_of_machine_identity:string>)
			RENEWMACHINEID(<type:string>, <ttp_url:string>, <request_id_of_machine_identity:string>)
			REVOKEMACHINEID(<type:string>, <ttp_url:string>, <request_id_of_machine_identity:string, <should_disable:bool>)
			LISTMACHINEIDS(<type:string>, <ttp_url:string>, <zone:string>)
			GETMACHINEIDSTATUS(<type:string>, <ttp_url:string>, <zone:string>, <name_of_machine_identity:string>)
			REQUESTMACHINEID(<type:string>, <ttp_url:string>, <zone:string>, <common_name:string>)
					`, 0)
				return nil
			} else {
				return nil
			}
		}
	}

	return fmt.Errorf("Unknown subcommand: %s. Please choose subcommand: 'install' 'status' 'getcreds'", subcommand)
}
