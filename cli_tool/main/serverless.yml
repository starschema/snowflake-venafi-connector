# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"




service: venafi-snowflake-connector
plugins:
  - serverless-snowflake-external-function-plugin
custom:
  snowflake:
    role: ${file(./config.yml):snowflake.role}
    account: ${file(.//config.yml):snowflake.account}
    username: ${file(./config.yml):snowflake.username}
    password: ${file(./config.yml):snowflake.password}
    warehouse: ${file(./config.yml):snowflake.warehouse}
    database: ${file(./config.yml):snowflake.database}
    schema: ${file(./config.yml):snowflake.schema}

# resources:
#   Resources:
#     LambdaRole:
#       Type: AWS::IAM::Role
#       Properties:
#         RoleName: Venafi-full-access-to-s3-and-lambda_by_serverless
#         AssumeRolePolicyDocument:
#           Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Principal:
#                 Service:
#                   - lambda.amazonaws.com
#                   - s3.amazonaws.com
#                   - cloudwatch.amazonaws.com
#               Action: sts:AssumeRole
#         Policies:
#           - PolicyName: AmazonS3FullAccess
#             PolicyDocument:
#               Version: '2012-10-17'
#               Statement:
#                 - Effect: Allow
#                   Action:
#                     - s3:*
#                   Resource: "*"
#           - PolicyName: AWSLambda_FullAccess
#             PolicyDocument:
#               Version: '2012-10-17'
#               Statement:
#                 - Effect: Allow
#                   Action:
#                     - cloudformation:DescribeStacks
#                     - cloudformation:ListStackResources
#                     - cloudwatch:ListMetrics
#                     - cloudwatch:GetMetricData
#                     - ec2:DescribeSecurityGroups
#                     - ec2:DescribeSubnets
#                     - ec2:DescribeVpcs
#                     - kms:ListAliases
#                     - iam:GetPolicy
#                     - iam:GetPolicyVersion
#                     - iam:GetRole"
#                     - iam:GetRolePolicy
#                     - iam:ListAttachedRolePolicies
#                     - iam:ListRolePolicies
#                     - iam:ListRoles
#                     - lambda:*
#                     - logs:DescribeLogGroups
#                     - states:DescribeStateMachine
#                     - states:ListStateMachines
#                     - tag:GetResources
#                     - xray:GetTraceSummaries
#                     - xray:BatchGetTraces
#                   Resource: "*"
#           - PolicyName: CloudWatchLogsFullAccess
#             PolicyDocument:
#               Version: '2012-10-17'
#               Statement:
#                 - Effect: Allow
#                   Action:
#                     - logs:*
#                   Resource: "*"

#  Every function that should be available as external function in snowflake needs
#  at least argument_signature and data_type information
functions:
  get_machine_id:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/getmachineid
    package:
      include:
        - bin/handlers/getmachineid
    events:
      - http:
          path: getmachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, request_id varchar)
      data_type: variant
  get_mid:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/getmachineid
    package:
      include:
        - bin/handlers/getmachineid
    events:
      - http:
          path: getmachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, request_id varchar)
      data_type: variant
  list_machine_ids:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/listmachineids
    package:
      include:
        - ../bin/handlers/listmachineids
    events:
      - http:
          path: listmachineids
          method: post
          authorizer: aws_iam
    snowflake:
          argument_signature: (type varchar, tpp_url varchar, zone varchar)
          data_type: variant
  list_mids:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/listmachineids
    package:
      include:
        - ../bin/handlers/listmachineids
    events:
      - http:
          path: listmachineids
          method: post
          authorizer: aws_iam
    snowflake:
          argument_signature: (type varchar, tpp_url varchar, zone varchar)
          data_type: variant
  request_machine_id:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/requestmachineid
    timeout: 35
    package:
      include:
        - ../bin/handlers/requestmachineid
    events:
      - http:
          path: requestmachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, dns varchar, zone varchar, upn varchar, common_name varchar)
      data_type: variant
  request_mid:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/requestmachineid
    timeout: 35
    package:
      include:
        - ../bin/handlers/requestmachineid
      exclude:
        - node_modules/**
    events:
      - http:
          path: requestmachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, dns varchar, zone varchar, upn varchar, common_name varchar)
      data_type: variant
  get_machine_id_status:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/getmachineidstatus
    package:
      include:
        - ../bin/handlers/getmachineidstatus
      exclude:
        - node_modules/**
    events:
      - http:
          path: getmachineidstatus
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, zone varchar, common_name varchar)
      data_type: variant
  get_mid_status:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/getmachineidstatus
    package:
      include:
        - ../bin/handlers/getmachineidstatus
      exclude:
        - node_modules/**
    events:
      - http:
          path: getmachineidstatus
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, zone varchar, common_name varchar)
      data_type: variant
  renew_machine_id:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/renewmachineid
    package:
      include:
        - ../bin/handlers/renewmachineid
      exclude:
        - node_modules/**
    events:
      - http:
          path: renewmachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, request_id varchar)
      data_type: variant
  renew_mid:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/renewmachineid
    package:
      include:
        - ../bin/handlers/renewmachineid
      exclude:
        - node_modules/**
    events:
      - http:
          path: renewmachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, request_id varchar)
      data_type: variant
  revoke_machine_id:
    role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/revokemachineid
    package:
      include:
        - ../bin/handlers/revokemachineid
      exclude:
        - node_modules/**
    events:
      - http:
          path: revokemachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, request_id varchar, should_disable varchar)
      data_type: variant
  revoke_mid:
    # role: arn:aws:iam::300480681691:role/Venafi-full-access-to-s3-and-lambda
    handler: bin/handlers/revokemachineid
    package:
      include:
        - ../bin/handlers/revokemachineid
      exclude:
        - node_modules/**
    events:
      - http:
          path: revokemachineid
          method: post
          authorizer: aws_iam
    snowflake:
      argument_signature: (type varchar, tpp_url varchar, request_id varchar, should_disable varchar)
      data_type: variant
# package:
#   include:
#   - bin/**
# exclude:
#   - node_modules/**

provider:
  name: aws
  profile: venafi-snowflake-connector
  runtime: go1.x
  region: ${file(./config.yml):aws.zone}
  environment:
    ZONE: ${file(./config.yml):aws.zone} # zone where bucket is created
    S3_BUCKET: ${file(./config.yml):aws.s3bucket} # name of the bucket where file is uploaed
    CREDENTIAL_FILE_NAME: "credentials.json" # venafi credential file

# you can overwrite defaults here
#  stage: dev